# Документация библиотеки EasyHTTP

## Language Navigation
[中文文档](README_ZH.markdown) | [Documentación en Español](README_ES.markdown) | [日本語ドキュメント](README_JA.markdown) | [한국어 문서](README_KO.markdown) | [Документация на русском](README_RU.markdown) | [Dokumentation auf Deutsch](README_DE.markdown)

## Обзор

**EasyHTTP** — это универсальная и удобная библиотека PHP, разработанная для упрощения операций с HTTP-запросами. Созданная с акцентом на простоту и функциональность, она предоставляет мощный набор функций для обработки HTTP-запросов, включая GET, POST, PUT, DELETE и другие, а также поддерживает расширенные возможности, такие как управление cookies, настройка прокси, контроль проверки SSL и поддержка пользовательских заголовков. Библиотека использует расширение cURL для PHP, обеспечивая надежную и эффективную HTTP-связь, что делает её отличным выбором для разработчиков, ищущих легкое, но мощное решение для взаимодействия с веб-сервисами.

Эта документация представляет собой подробное руководство по библиотеке EasyHTTP, подчеркивая её простоту использования, богатый набор функций и практические примеры, которые помогут разработчикам быстро интегрировать её в свои проекты.

## Основные возможности

Библиотека EasyHTTP разработана так, чтобы быть интуитивно понятной и многофункциональной, предлагая следующие возможности:

- **Гибкие методы HTTP**: Поддерживает широкий спектр методов HTTP (GET, POST, HEAD, PUT, OPTIONS, DELETE, TRACE, CONNECT) с простой настройкой.
- **Управление cookies**: Предоставляет специализированный класс `CookieManager` для беспрепятственной работы с cookies, включая их установку, получение и очистку.
- **Настраиваемые заголовки**: Поддерживает конфигурацию заголовков как в строковом, так и в массивном формате с автоматическим добавлением стандартных заголовков для удобства.
- **Поддержка прокси**: Настройка параметров прокси с опциональной аутентификацией для безопасной и гибкой маршрутизации сети.
- **Контроль проверки SSL**: Возможность включения или отключения проверки SSL для пира и хоста, что соответствует различным требованиям безопасности.
- **Обработка перенаправлений**: Поддержка включения или отключения автоматического следования перенаправлениям с доступом к местоположению перенаправления.
- **Настройка таймаута**: Возможность установки пользовательских периодов таймаута для эффективного управления длительностью запросов.
- **Настройка пользовательского агента**: Упрощает установку пользовательских строк пользовательского агента для запросов.
- **Полная обработка ответов**: Возвращает подробные данные ответа, включая коды состояния, заголовки, тело и cookies, в структурированном формате.
- **Обработка ошибок**: Реализует надежную обработку исключений для обеспечения надежной работы и четких сообщений об ошибках.
- **Плавный интерфейс**: Предлагает цепочечный дизайн методов для интуитивно понятного и читаемого кода.

## Установка

Для использования библиотеки EasyHTTP убедитесь, что у вас установлен PHP с включенным расширением cURL. Выполните следующие шаги:

1. Разместите директорию `EasyHTTP`, содержащую файлы библиотеки (`HttpRequestClass.php`, `HttpRequestParameter.php`, `HttpResponseData.php`, `CookieManager.php`), в директории вашего проекта.
2. Включите файл `autoload.php` в ваш проект для автоматической загрузки необходимых классов:

```php
require_once __DIR__ . '/autoload.php';
```

3. Используйте пространство имен `EasyHTTP` для доступа к классам библиотеки:

```php
use EasyHTTP\HttpRequestClass;
```

## Примеры использования

Следующие примеры демонстрируют простоту использования и универсальность библиотеки, охватывая распространенные случаи использования и расширенные функции.

### 1. Базовый GET-запрос

Выполнение простого GET-запроса для получения данных с URL:

```php
use EasyHTTP\HttpRequestClass;

try {
    $response = (new HttpRequestClass('http://example.com'))
        ->Send()
        ->getResponse();
    echo $response->body; // Вывод тела ответа
} catch (Exception $e) {
    echo $e->getMessage();
}
```

Этот пример демонстрирует простую синтаксическую конструкцию библиотеки для инициирования GET-запроса и получения тела ответа.

### 2. Альтернативный шаблон GET-запроса

Библиотека поддерживает альтернативный шаблон для настройки запросов:

```php
$http = new HttpRequestClass();
try {
    $response = $http->open('http://example.com')
        ->Send()
        ->getResponse();
    echo $response->body;
} catch (Exception $e) {
    echo $e->getMessage();
}
```

Метод `open` позволяет динамически задавать URL и метод, повышая гибкость.

### 3. GET-запрос с пользовательским агентом

Настройка пользовательского агента для GET-запроса:

```php
try {
    $response = (new HttpRequestClass('http://example.com'))
        ->set_userAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64)')
        ->Send()
        ->getResponse();
    echo $response->body;
} catch (Exception $e) {
    echo $e->getMessage();
}
```

Эта функция полезна для имитации поведения определенных браузеров или соответствия требованиям API.

### 4. POST-запрос с данными формы

Отправка POST-запроса с данными формы:

```php
try {
    $response = (new HttpRequestClass('

https://postman-echo.com/post', 1)) // 1 = POST
        ->Send([
            'username' => 'john_doe',
            'password' => 'secure123'
        ])
        ->getResponse();
    echo "POST Ответ: " . $response->body;
} catch ( Ascending new chunk (Exception $e) {
    echo $e->getMessage();
}
```

Библиотека упрощает отправку данных POST, поддерживая как массивы, так и строковые форматы.

### 5. Управление cookies

Управление cookies для постоянных сессий:

```php
try {
    $http = new HttpRequestClass('http://example.com');
    $http->set_Cookie_str('session_id=abc123; user_pref=dark_mode');
    $response = $http->Send()->getResponse();
    echo $response->cookieManager->getCookieString(); // Вывод cookies
} catch (Exception $-easy) {
    echo $e->getMessage();
}
```

Класс `CookieManager` обрабатывает разбор, хранение и извлечение cookies, автоматически поддерживая cookies между несколькими запросами.

### 6. Расширенное управление cookies

Для более детального контроля используйте `CookieManager` напрямую:

```php
try {
    $http = new HttpRequestClass();
    $cookieManager = $http->CookieManager();
    $cookieManager->setCookie('language', 'ru-RU')
                  ->setCookie('theme', 'dark');
    $response = $http->open('http://example.com')
                     ->Send()
                     ->getResponse();
    echo "Текущие cookies: " . $cookieManager->getCookieString();
} catch (Exception $e) {
    echo $e->getMessage();
}
```

Это позволяет выполнять тонкие операции с cookies, такие как установка или удаление конкретных cookies.

### 7. Обработка перенаправлений

Контроль поведения перенаправления и доступ к информации о перенаправлении:

```php
try {
    $http = new HttpRequestClass('http://example.com/redirect');
    $http->set()->followLocation = false; // Отключить автоматическое перенаправление
    $response = $http->Send()->getResponse();
    if ($response->statusCode >= 300 && $response->statusCode < 400) {
        $location = $response->responseHeadersArray['Location'] ?? '';
        echo "Перенаправление на: " . $location;
    }
} catch (Exception $e) {
    echo $e->getMessage();
}
```

Эта функция полезна для отладки или ручной обработки перенаправлений.

### 8. Настройка прокси

Настройка прокси для запросов:

```php
try {
    $response = (new HttpRequestClass('http://example.com'))
        ->set_proxy('127.0.0.1:8080', 'proxy_user', 'proxy_pass')
        ->Send()
        ->getResponse();
    echo $response->body;
} catch (Exception $e) {
    echo $e->getMessage();
}
```

Библиотека поддерживает аутентифицированные прокси, что делает её подходящей для безопасных сред.

### 9. Контроль проверки SSL

Отключение проверки SSL для определенных сценариев:

```php
try {
    $response = (new HttpRequestClass('https://example.com'))
        ->setSslVerification(false, false)
        ->Send()
        ->getResponse();
    echo $response->body;
} catch (Exception $e) {
    echo $e->getMessage();
}
```

Эта гибкость идеальна для тестирования или сред с самоподписанными сертификатами.

### 10. Пользовательские заголовки

Установка пользовательских заголовков для запросов:

```php
try {
    $http = new HttpRequestClass('http://example.com');
    $http->set()->headers_arr = [
        'Authorization' => 'Bearer xyz123',
        'X-Custom-Header' => 'value'
    ];
    $response = $http->Send()->getResponse();
    var_dump($response->responseHeadersArray);
} catch (Exception $e) {
    echo $e->getMessage();
}
```

Библиотека поддерживает заголовки как в формате массива, так и в строковом формате, с интеллектуальным слиянием стандартных заголовков.

### 11. Настройка таймаута

Установка пользовательского таймаута для запросов:

```php
try {
    $http = new HttpRequestClass('http://example.com');
    $http->set()->timeout = 5; // Установить таймаут на 5 секунд
    $response = $http->Send()->getResponse();
    echo $response->body;
} catch (Exception $e) {
    echo "Ошибка таймаута: " . $e->getMessage();
}
```

Это гарантирует, что запросы не зависают бесконечно, повышая надежность приложения.

## Структура классов

Библиотека EasyHTTP состоит из четырех основных классов, каждый из которых выполняет определенную роль:

1. **HttpRequestClass**: Основной класс для инициирования и настройки HTTP-запросов. Предоставляет методы для установки URL, методов, заголовков, прокси и других параметров с плавным интерфейсом для цепочки операций.
2. **HttpRequestParameter**: Управляет параметрами запроса, такими как URL, метод, заголовки, cookies и таймауты, позволяя детально контролировать настройки запросов.
3. **HttpResponseData**: Хранит данные ответа, включая тело, код состояния, заголовки и cookies, в структурированном формате для легкого доступа.
4. **CookieManager**: Обрабатывает операции с cookies, включая их установку, получение и очистку, с поддержкой строкового и парного форматов ключ-значение.

## Обработка ошибок

Библиотека использует механизм обработки исключений PHP для элегантного управления ошибками. Общие исключения включают:

- **InvalidArgumentException**: Выбрасывается для недействительных URL или пустых данных POST.
- **Exception**: Выбрасывается для ошибок cURL с подробными кодами ошибок и сообщениями.

Все методы, взаимодействующие с сетью, в предоставленных примерах обернуты в блоки try-catch, что обеспечивает надежную обработку ошибок в производственном коде.

## Лучшие практики

Для максимальной эффективности библиотеки учитывайте следующее:

- **Используйте плавный интерфейс**: Цепочка методов, таких как `open`, `set`, `Send` и `getResponse`, для создания читаемого кода.
- **Обрабатывайте исключения**: Всегда оборачивайте сетевые операции в блоки try-catch для элегантной обработки ошибок.
- **Используйте управление cookies**: Используйте `CookieManager` для сохранения сессий между несколькими запросами.
- **Устанавливайте подходящие таймауты**: Настройте таймауты, чтобы предотвратить блокирование приложения длительными запросами.
- **Проверяйте URL**: Убедитесь, что URL действительны перед отправкой запросов, чтобы избежать исключений.

## Заключение

Библиотека EasyHTTP — это мощный и интуитивно понятный инструмент для разработчиков PHP, предлагающий полный набор функций, упакованный в простой и цепочечный интерфейс. Будь то выполнение базовых GET-запросов, управление сложными сессиями cookies или настройка прокси и пользовательских заголовков, EasyHTTP обеспечивает гибкость и надежность, необходимые для современной веб-разработки. Надежная обработка ошибок, подробные данные ответа и поддержка расширенных функций HTTP делают её идеальным выбором как для простых скриптов, так и для сложных приложений.

Для получения дополнительной информации или внесения вклада в библиотеку посетите [https://github.com/thiswod/EasyHTTP](https://github.com/thiswod/EasyHTTP).