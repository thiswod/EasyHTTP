# Документация по использованию HttpRequestClass

Этот документ предоставляет исчерпывающее руководство по использованию `HttpRequestClass` и связанных с ним классов (`CookieManager`, `HttpRequestParameter`, `HttpResponseData`) в PHP. Эти классы разработаны для упрощения операций с HTTP-запросами, поддерживают методы, такие как GET, POST, и предлагают функции управления cookie, заголовками, прокси и настройками SSL.

## Содержание
1. [Обзор](#обзор)
2. [Структура директорий](#структура-директорий)
3. [Ключевые классы и их назначение](#ключевые-классы-и-их-назначение)
4. [Установка и настройка](#установка-и-настройка)
5. [Основное использование](#основное-использование)
    - [Инициировать GET-запрос](#инициировать-get-запрос)
    - [Инициировать POST-запрос](#инициировать-post-запрос)
    - [Установить пользовательские заголовки](#установить-пользовательские-заголовки)
    - [Управление cookie](#управление-cookie)
    - [Настройка прокси](#настройка-прокси)
    - [Проверка SSL](#проверка-ssl)
6. [Расширенное использование](#расширенное-использование)
    - [Пользовательские HTTP-методы](#пользовательские-http-методы)
    - [Обработка перенаправлений](#обработка-перенаправлений)
    - [Установка тайм-аута](#установка-тайм-аута)
    - [Пользовательское разрешение DNS](#пользовательское-разрешение-dns)
7. [Обработка ошибок](#обработка-ошибок)
8. [Пример кода](#пример-кода)
9. [Справочник классов](#справочник-классов)
    - [HttpRequestClass](#httprequestclass)
    - [CookieManager](#cookiemanager)
    - [HttpRequestParameter](#httprequestparameter)
    - [HttpResponseData](#httpresponsedata)

## Обзор

`HttpRequestClass` — это класс на основе PHP, использующий библиотеку cURL для выполнения HTTP-запросов. Он предлагает гибкий цепной интерфейс для настройки запросов, управления cookie, установки заголовков и обработки ответов. Поддерживающие классы включают `CookieManager` (для обработки cookie), `HttpRequestParameter` (для хранения параметров запроса) и `HttpResponseData` (для хранения данных ответа).

Основные характеристики включают:
- Поддержка множества HTTP-методов (GET, POST, HEAD, PUT, OPTIONS, DELETE, TRACE, CONNECT).
- Управление cookie через `CookieManager`.
- Гибкая конфигурация заголовков в формате строки или массива.
- Поддержка прокси (с аутентификацией).
- Опции проверки SSL.
- Автоматическая обработка заголовков ответа, cookie и содержимого.

## Структура директорий

Проект организован следующим образом:

```
EasyHTTP
├── EasyHTTP
│   ├── CookieManager.php
│   ├── HttpRequestClass.php
│   ├── HttpRequestParameter.php
│   └── HttpResponseData.php
├── Demo.php
└── autoload.php
```

- **`EasyHTTP/`**: Корневой каталог, содержащий подкаталоги и ключевые файлы.
  - **`EasyHTTP/`**: Содержит основные PHP-классы.
    - **`CookieManager.php`**: Управляет операциями с cookie.
    - **`HttpRequestClass.php`**: Класс выполнения основных запросов.
    - **`HttpRequestParameter.php`**: Управляет параметрами запроса.
    - **`HttpResponseData.php`**: Хранит данные ответа.
  - **`Demo.php`**: Расположен в корневом каталоге, содержит примеры использования.
  - **`autoload.php`**: Расположен в корневом каталоге, реализует автозагрузку SPL.

## Ключевые классы и их назначение

- **HttpRequestClass**: Основной класс для инициирования и отправки HTTP-запросов, управления cURL-обработчиками и координации других классов.
- **CookieManager**: Обрабатывает хранение, установку и извлечение cookie, поддерживает отдельные cookie и строки cookie.
- **HttpRequestParameter**: Хранит параметры запроса (например, URL, метод, заголовки, настройки прокси), предоставляя цепной интерфейс конфигурации.
- **HttpResponseData**: Хранит данные ответа, включая код состояния, заголовки, тело и cookie.

## Установка и настройка

1. Убедитесь, что на сервере установлен PHP с включенным расширением cURL.
2. Сохраните предоставленный PHP-код в файл (например, `HttpRequestClass.php`).
3. Включите файл в ваш PHP-проект:

```php
require_once 'HttpRequestClass.php';
```

## Основное использование

### Инициировать GET-запрос

Выполните простой GET-запрос:

```php
try {
    $response = (new HttpRequestClass("https://www.example.com"))->Send()->GetResponse();
    echo $response->body; // Выводит тело ответа
    echo $response->cookieManager->getCookieString(); // Выводит cookie
} catch (Exception $e) {
    echo "Ошибка: " . $e->getMessage();
}
```

Или используйте метод `open`:

```php
$http = new HttpRequestClass();
$http->open("https://www.example.com");
$http->Send();
echo $http->GetResponse()->body; // Выводит тело ответа
```

### Инициировать POST-запрос

Выполните POST-запрос с данными:

```php
try {
    $response = (new HttpRequestClass("https://www.example.com", 1))
        ->Send(["KeyWord" => "Post request"])
        ->GetResponse();
    echo $response->